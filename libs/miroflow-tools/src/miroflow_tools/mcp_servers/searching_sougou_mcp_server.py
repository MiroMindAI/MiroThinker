from cgitb import lookup
import os
from fastmcp import FastMCP
import asyncio
import json
from tencentcloud.common.common_client import CommonClient
from tencentcloud.common import credential
from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile


TENCENTCLOUD_SECRET_ID = os.environ.get("TENCENTCLOUD_SECRET_ID", "")
TENCENTCLOUD_SECRET_KEY = os.environ.get("TENCENTCLOUD_SECRET_KEY", "")

mcp = FastMCP("searching_sougou_mcp_server")

@mcp.tool()
async def sougou_search(
    Query: str,
    Cnt: int = 10
) -> str:
    '''
    Performs web searches via Tencent Cloud SearchPro API to retrieve comprehensive web information

    Capabilities:
        - Retrieves structured search results with core details like titles, source URLs, summaries

    Usage examples:
        1. Basic natural search: `{"Query": "today's weather in Beijing", "Cnt": 0}` returns standard weather information and related web results

    Args:
        Query: The core search query string. Be specific to improve result relevance (e.g., "2024 World Cup final results"). (Required, no default value)
        Cnt: Number of search results to return (10/20/30/40/50). Optional, default: 10)

    Returns:
        The search results in JSON format, including the following core fields:
        - Query: The original search query (consistent with the input Query, for request verification)
        - Pages: Array of JSON strings, each containing details of a single search result (e.g., title, url, passage, content, site, favicon)
        - RequestId: Unique request ID (generated by the server, used for troubleshooting interface call issues)
    '''
    
    if TENCENTCLOUD_SECRET_ID == "" or TENCENTCLOUD_SECRET_KEY == "":
        return "TENCENTCLOUD_SECRET_ID or  TENCENTCLOUD_SECRET_KEY is not set, sougou_search tool is not available."
    
    retry_count = 0
    max_retries = 3
    
    while retry_count < max_retries:
        try:
            cred = credential.Credential(TENCENTCLOUD_SECRET_ID, TENCENTCLOUD_SECRET_KEY)
            httpProfile = HttpProfile()
            httpProfile.endpoint = "wsa.tencentcloudapi.com"
            clientProfile = ClientProfile()
            clientProfile.httpProfile = httpProfile

            params = f"{{\"Query\":\"{Query}\",\"Mode\":0, \"Cnt\":{Cnt}}}"
            common_client = CommonClient("wsa", "2025-05-08", cred, "", profile=clientProfile)
            result = common_client.call_json("SearchPro", json.loads(params))['Response']
            del result["RequestId"]
            pages = []
            for page in result["Pages"]:
                page = json.loads(page)
                new_page = {}
                new_page["title"] = page["title"]
                new_page["url"] = page["url"]
                new_page["passage"] = page["passage"]
                new_page["content"] = page["content"]
                new_page["site"] = page["site"]
                new_page["favicon"] = page["favicon"]
                pages.append(new_page)
            result["Pages"] = pages
            return json.dumps(result, ensure_ascii=False)
        except TencentCloudSDKException as err:
            retry_count += 1
            
            if retry_count >= max_retries:
                return f"Tool execution failed after {max_retries} connection attempts: Unexpected error occurred."
            
            await asyncio.sleep(
                min(3 * retry_count, 10)
            )  # Exponential backoff with cap
            
if __name__ == "__main__":
    mcp.run(transport="stdio")