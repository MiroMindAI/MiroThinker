import os
from fastmcp import FastMCP
import asyncio
import json
from tencentcloud.common.common_client import CommonClient
from tencentcloud.common import credential
from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile


TENCENTCLOUD_SECRET_ID = os.environ.get("TENCENTCLOUD_SECRET_ID", "")
TENCENTCLOUD_SECRET_KEY = os.environ.get("TENCENTCLOUD_SECRET_KEY", "")

mcp = FastMCP("searching-sougou-mcp-server")

@mcp.tool()
async def sougou_search(
    Query: str,
    Cnt: int = 10
) -> str:
    '''
    Performs web searches via Tencent Cloud SearchPro API to retrieve comprehensive web information, including natural search results and multimodal VR results (based on mode selection). Use this tool when you need up-to-date information not in your training data, such as fact-checking, researching current events, finding domain-specific content (via site filtering), or obtaining industry-targeted results.

    Capabilities:
        - Retrieves structured search results with core details like titles, source URLs, release dates, summaries, and relevance scores
        - Supports three result modes: natural retrieval, multimodal VR, and mixed (natural + multimodal VR)
        - Allows customizing the number of returned results (10-50) for more comprehensive research

    Limitations:
        - Cannot access content behind paywalls or login-required pages
        - Cannot automatically verify the accuracy of retrieved information
        - The Site, FromTime, and ToTime parameters are invalid for multimodal VR results (Mode=1)
        - Exclusive features (Industry filtering, Cnt customization, dynamic abstracts) are only available for the "尊享版" and not supported by the basic version
        - Does not return full website content, only structured summaries, links, and basic metadata

    Usage examples:
        1. Basic natural search: `{"Query": "today's weather in Beijing", "Mode": 0}` returns standard weather information and related web results

    Args:
        Query: The core search query string. Be specific to improve result relevance (e.g., "2024 World Cup final results"). (Required, no default value)
        Cnt: Number of search results to return (10/20/30/40/50). Optional, default: 10)

    Returns:
        The search results in JSON format, including the following core fields:
        - Query: The original search query (consistent with the input Query, for request verification)
        - Pages: Array of JSON strings, each containing details of a single search result (e.g., title, date, url, passage, content, site, score, images, favicon)
        - Msg: Prompt information (e.g., "hit black query" for blacklisted queries; empty if no special status)
        - RequestId: Unique request ID (generated by the server, used for troubleshooting interface call issues)
    '''
    
    if TENCENTCLOUD_SECRET_ID == "" or TENCENTCLOUD_SECRET_KEY == "":
        return "TENCENTCLOUD_SECRET_ID or  TENCENTCLOUD_SECRET_KEY is not set, sougou_search tool is not available."
    
    retry_count = 0
    max_retries = 3
    
    while retry_count < max_retries:
        try:
            cred = credential.Credential(TENCENTCLOUD_SECRET_ID, TENCENTCLOUD_SECRET_KEY)
            httpProfile = HttpProfile()
            httpProfile.endpoint = "wsa.tencentcloudapi.com"
            clientProfile = ClientProfile()
            clientProfile.httpProfile = httpProfile

            params = f"{{\"Query\":\"{Query}\",\"Mode\":0, \"Cnt\":{Cnt}}}"
            common_client = CommonClient("wsa", "2025-05-08", cred, "", profile=clientProfile)
            return common_client.call_json("SearchPro", json.loads(params))
        except TencentCloudSDKException as err:
            retry_count += 1
            
            if retry_count >= max_retries:
                return f"Tool execution failed after {max_retries} connection attempts: Unexpected error occurred."
            
            await asyncio.sleep(
                min(3 * retry_count, 10)
            )  # Exponential backoff with cap
            
